#!/usr/bin/python

#######################################################################
#
# Script for copying files generated by dagger2
#
# @author FrantisekGazo
#
#######################################################################

import argparse
import os
import shutil
import sys


def find_files(in_dir_path, out_dir_path, file_name_sufix):
    for file_name in os.listdir(in_dir_path):
        file_path = os.path.join(in_dir_path, file_name)

        if os.path.isfile(file_path) and file_name.endswith(file_name_sufix):
            lognl(file_path)
            shutil.copyfile(file_path, os.path.join(out_dir_path, file_name))

        elif os.path.isdir(file_path) and file_path != out_dir_path:
            find_files(file_path, out_dir_path, file_name_sufix)


def main(in_dir_path, out_dir_path):
    if not os.path.exists(in_dir_path):
        print('%s does not exists!' % in_dir_path)
        sys.exit(1)

    if not os.path.exists(out_dir_path):
        os.makedirs(out_dir_path)

    lognl('Scanning files...')

    find_files(in_dir_path, out_dir_path, '_MembersInjector.java')

    lognl('Done')


def lognl(text):
    sys.stdout.write(text)
    sys.stdout.write('\n')
    sys.stdout.flush()


################################
# run
################################
if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--input_dir', required=True)
    parser.add_argument('-o', '--output-dir', required=True)
    args = parser.parse_args()

    main(os.path.abspath(args.input_dir), os.path.abspath(args.output_dir))
